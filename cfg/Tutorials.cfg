#!/usr/bin/env python
PACKAGE = "region_growing_segmentation"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("position_x", double_t,    0, "position_x param", 0,  -100, 100)
gen.add("position_y", double_t,    0, "position_y param", 0,  -100, 100)
gen.add("position_z", double_t,    0, "position_z param", 0,  -100, 100)

gen.add("quaternion_x", double_t, 0, "quaternion_x param",0, -2,   2)
gen.add("quaternion_y", double_t, 0, "quaternion_y param",0, -2,   2)
gen.add("quaternion_z", double_t, 0, "quaternion_z param",0, -2,   2)
gen.add("quaternion_w", double_t, 0, "quaternion_z param",0, -2,   2)

gen.add("scale_x", double_t, 0, "quaternion_z param",0, -10,   50)
gen.add("scale_z", double_t, 0, "quaternion_z param",0, -10,   50)

#gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
#gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")], "An enum to set size")
#
# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "region_growing_segmentation", "Tutorials"))
